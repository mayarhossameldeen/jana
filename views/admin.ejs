<%- include('partials/head', { title: 'Admin Dashboard' }) %>

<div class="admin-dashboard">
  <!-- Admin Navigation -->
  <nav class="navbar navbar-expand-lg">
    <div class="container">
      <div class="d-flex justify-content-between align-items-center w-100">
        <h1 class="navbar-brand mb-0">Admin Dashboard</h1>
        <div class="d-flex align-items-center">
          <a href="/api/users/logout" class="btn btn-outline-custom">Log out</a>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="container py-5">
    <!-- Stats Overview -->
    <div class="row g-4 mb-5">
      <div class="col-md-3">
        <div class="feature-card">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="text-muted mb-2">Total Users</h6>
              <h3 class="mb-0" id="totalUsers">-</h3>
              <small class="text-muted"
                >Active: <span id="activeUsers">-</span></small
              >
            </div>
            <i class="fas fa-users fa-2x text-primary"></i>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="feature-card">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="text-muted mb-2">Total Orders</h6>
              <h3 class="mb-0" id="totalOrders">-</h3>
              <small class="text-muted"
                >Pending: <span id="pendingOrders">-</span></small
              >
            </div>
            <i class="fas fa-shopping-cart fa-2x text-primary"></i>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="feature-card">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="text-muted mb-2">Total Products</h6>
              <h3 class="mb-0" id="totalProducts">-</h3>
              <small class="text-muted"
                >Low Stock: <span id="lowStockProducts">-</span></small
              >
            </div>
            <i class="fas fa-box fa-2x text-primary"></i>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="feature-card">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="text-muted mb-2">Total Bookings</h6>
              <h3 class="mb-0" id="totalBookings">-</h3>
              <small class="text-muted"
                >Today: <span id="todayBookings">-</span></small
              >
            </div>
            <i class="fas fa-calendar-check fa-2x text-primary"></i>
          </div>
        </div>
      </div>
    </div>

    <!-- Tabs -->
    <div class="card mb-4">
      <div class="card-body p-0">
        <ul class="nav nav-tabs" role="tablist">
          <li class="nav-item">
            <button
              class="nav-link"
              data-bs-toggle="tab"
              data-bs-target="#users"
              type="button"
            >
              <i class="fas fa-users me-2"></i>Users
            </button>
          </li>
          <li class="nav-item">
            <button
              class="nav-link"
              data-bs-toggle="tab"
              data-bs-target="#products"
              type="button"
            >
              <i class="fas fa-box me-2"></i>Products
            </button>
          </li>
          <li class="nav-item">
            <button
              class="nav-link"
              data-bs-toggle="tab"
              data-bs-target="#services"
              type="button"
            >
              <i class="fas fa-spa me-2"></i>Services
            </button>
          </li>
          <li class="nav-item">
            <button
              class="nav-link"
              data-bs-toggle="tab"
              data-bs-target="#orders"
              type="button"
            >
              <i class="fas fa-shopping-cart me-2"></i>Orders & Bookings
            </button>
          </li>
        </ul>
      </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content">
      <!-- Users Tab -->
      <div class="tab-pane fade" id="users">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h5 class="card-title mb-0">User Management</h5>
              <button class="btn btn-custom" onclick="showAddUserModal()">
                <i class="fas fa-plus me-2"></i>Add User
              </button>
            </div>
            <div class="mb-4">
              <div class="input-group">
                <span class="input-group-text"
                  ><i class="fas fa-search"></i
                ></span>
                <input
                  type="text"
                  id="userSearch"
                  class="form-control"
                  placeholder="Search users..."
                />
              </div>
            </div>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Role</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="usersTableBody">
                  <!-- Users will be loaded here -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Products Tab -->
      <div class="tab-pane fade" id="products">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h5 class="card-title mb-0">Product Management</h5>
              <button class="btn btn-custom" onclick="showAddProductModal()">
                <i class="fas fa-plus me-2"></i>Add Product
              </button>
            </div>
            <div class="mb-4">
              <div class="input-group">
                <span class="input-group-text"
                  ><i class="fas fa-search"></i
                ></span>
                <input
                  type="text"
                  id="productSearch"
                  class="form-control"
                  placeholder="Search products..."
                />
              </div>
            </div>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Category</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="productsTableBody">
                  <!-- Products will be loaded here -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Services Tab -->
      <div class="tab-pane fade" id="services">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h5 class="card-title mb-0">Service Management</h5>
              <button class="btn btn-custom" onclick="showAddServiceModal()">
                <i class="fas fa-plus me-2"></i>Add Service
              </button>
            </div>
            <div class="mb-4">
              <div class="input-group">
                <span class="input-group-text"
                  ><i class="fas fa-search"></i
                ></span>
                <input
                  type="text"
                  id="serviceSearch"
                  class="form-control"
                  placeholder="Search services..."
                />
              </div>
            </div>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Duration</th>
                    <th>Category</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="servicesTableBody">
                  <!-- Services will be loaded here -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Orders & Bookings Tab -->
      <div class="tab-pane fade" id="orders">
        <div class="row g-4">
          <!-- Orders Section -->
          <div class="col-12">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title mb-4">Order Management</h5>
                <div class="mb-4">
                  <div class="input-group">
                    <span class="input-group-text"
                      ><i class="fas fa-search"></i
                    ></span>
                    <input
                      type="text"
                      id="orderSearch"
                      class="form-control"
                      placeholder="Search orders..."
                    />
                  </div>
                </div>
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Items</th>
                        <th>Total</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                      <!-- Orders will be loaded here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>

          <!-- Bookings Section -->
          <div class="col-12">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title mb-4">Booking Management</h5>
                <div class="mb-4">
                  <div class="input-group">
                    <span class="input-group-text"
                      ><i class="fas fa-search"></i
                    ></span>
                    <input
                      type="text"
                      id="bookingSearch"
                      class="form-control"
                      placeholder="Search bookings..."
                    />
                  </div>
                </div>
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>Booking ID</th>
                        <th>Customer</th>
                        <th>Service</th>
                        <th>Date & Time</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody id="bookingsTableBody">
                      <!-- Bookings will be loaded here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New User</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addUserForm">
          <div id="addUserError" class="alert alert-danger d-none"></div>
          <div class="mb-3">
            <label class="form-label">Full Name</label>
            <input type="text" class="form-control" name="fullName" />
          </div>
          <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" class="form-control" name="email" />
          </div>
          <div class="mb-3">
            <label class="form-label">Password</label>
            <input type="password" class="form-control" name="password" />
          </div>
          <div class="mb-3">
            <label class="form-label">Phone</label>
            <input type="tel" class="form-control" name="phone" />
          </div>
          <div class="mb-3">
            <label class="form-label">Role</label>
            <select class="form-select" name="role">
              <option value="customer">Customer</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="text-end">
            <button
              type="button"
              class="btn btn-outline-custom me-2"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-custom">Add User</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Product</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addProductForm">
          <div id="addProductError" class="alert alert-danger d-none"></div>
          <div class="mb-3">
            <label class="form-label">Product Name</label>
            <input type="text" class="form-control" name="name" />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea
              class="form-control"
              name="description"
              rows="3"
            ></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Price</label>
            <input
              type="number"
              class="form-control"
              name="price"
              step="0.01"
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Stock</label>
            <input type="number" class="form-control" name="stock" />
          </div>
          <div class="mb-3">
            <label class="form-label">Category</label>
            <select class="form-select" name="category">
              <option value="Hair">Hair</option>
              <option value="Skincare">Skincare</option>
              <option value="Makeup">Makeup</option>
              <option value="Bath and Body">Bath and Body</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Image</label>
            <input type="file" class="form-control" name="image" />
          </div>
          <div class="text-end">
            <button
              type="button"
              class="btn btn-outline-custom me-2"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-custom">Add Product</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Add Service Modal -->
<div class="modal fade" id="addServiceModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Service</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addServiceForm">
          <div id="addServiceError" class="alert alert-danger d-none"></div>
          <div class="mb-3">
            <label class="form-label">Service Name</label>
            <input type="text" class="form-control" name="name" />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea
              class="form-control"
              name="description"
              rows="3"
            ></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Price</label>
            <input
              type="number"
              class="form-control"
              name="price"
              step="0.01"
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Duration (minutes)</label>
            <input
              type="number"
              class="form-control"
              name="duration"
              min="10"
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Category</label>
            <select class="form-select" name="category">
              <option value="Hair">Hair</option>
              <option value="Nails">Nails</option>
              <option value="Body Care">Body Care</option>
              <option value="Makeup">Makeup</option>
              <option value="Bridal">Bridal</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Image</label>
            <input type="file" class="form-control" name="image" />
          </div>
          <div class="text-end">
            <button
              type="button"
              class="btn btn-outline-custom me-2"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-custom">Add Service</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  .admin-dashboard {
    background: linear-gradient(135deg, var(--cream) 0%, var(--lavender) 100%);
    min-height: 100vh;
  }

  .nav-tabs .nav-link {
    color: var(--text-color);
    border: none;
    padding: 1rem 1.5rem;
    font-weight: 500;
    transition: var(--transition);
  }

  .nav-tabs .nav-link:hover {
    color: var(--primary-pink);
  }

  .nav-tabs .nav-link.active {
    color: var(--primary-pink);
    border-bottom: 2px solid var(--primary-pink);
    background: none;
  }

  .card {
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    border-radius: 15px;
  }

  .table {
    margin-bottom: 0;
  }

  .table th {
    font-weight: 600;
    color: var(--text-color);
    border-bottom: 2px solid var(--primary-pink);
  }

  .table td {
    vertical-align: middle;
  }

  .status-badge {
    padding: 0.35rem 0.65rem;
    border-radius: 50rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .status-badge.pending {
    background-color: var(--soft-pink);
    color: var(--primary-pink);
  }

  .status-badge.completed {
    background-color: var(--lavender);
    color: var(--text-color);
  }

  .status-badge.cancelled {
    background-color: #ffebee;
    color: #f44336;
  }

  .modal-content {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
  }

  .modal-header {
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
  }

  .modal-footer {
    border-top: 1px solid rgba(255, 255, 255, 0.3);
  }

  .form-control,
  .form-select {
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    padding: 0.75rem 1rem;
  }

  .form-control:focus,
  .form-select:focus {
    background: rgba(255, 255, 255, 0.95);
    border-color: var(--primary-pink);
    box-shadow: 0 0 0 0.2rem rgba(255, 105, 180, 0.25);
  }

  .input-group-text {
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 10px 0 0 10px;
  }

  .input-group .form-control {
    border-radius: 0 10px 10px 0;
  }
</style>

<script>
  // Tab switching
  document.querySelectorAll('[data-bs-toggle="tab"]').forEach((tab) => {
    tab.addEventListener("shown.bs.tab", (event) => {
      const target = event.target.getAttribute("data-bs-target");
      document.querySelectorAll(".tab-pane").forEach((pane) => {
        pane.classList.remove("show", "active");
      });
      document.querySelector(target).classList.add("show", "active");
    });
  });

  // Modal functions
  function showAddUserModal() {
    new bootstrap.Modal(document.getElementById("addUserModal")).show();
  }

  function showAddProductModal() {
    new bootstrap.Modal(document.getElementById("addProductModal")).show();
  }

  function showAddServiceModal() {
    new bootstrap.Modal(document.getElementById("addServiceModal")).show();
  }

  // Search functionality
  document.getElementById("userSearch").addEventListener("input", function (e) {
    const searchTerm = e.target.value.toLowerCase();
    const rows = document.querySelectorAll("#usersTableBody tr");
    rows.forEach((row) => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(searchTerm) ? "" : "none";
    });
  });

  document
    .getElementById("productSearch")
    .addEventListener("input", function (e) {
      const searchTerm = e.target.value.toLowerCase();
      const rows = document.querySelectorAll("#productsTableBody tr");
      rows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? "" : "none";
      });
    });

  document
    .getElementById("orderSearch")
    .addEventListener("input", function (e) {
      const searchTerm = e.target.value.toLowerCase();
      const rows = document.querySelectorAll("#ordersTableBody tr");
      rows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? "" : "none";
      });
    });

  document
    .getElementById("bookingSearch")
    .addEventListener("input", function (e) {
      const searchTerm = e.target.value.toLowerCase();
      const rows = document.querySelectorAll("#bookingsTableBody tr");
      rows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? "" : "none";
      });
    });

  document
    .getElementById("serviceSearch")
    .addEventListener("input", function (e) {
      const searchTerm = e.target.value.toLowerCase();
      const rows = document.querySelectorAll("#servicesTableBody tr");
      rows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? "" : "none";
      });
    });

  // Fetch and display data
  async function fetchDashboardData() {
    try {
      // Fetch users
      const usersResponse = await fetch("/api/users");
      const users = await usersResponse.json();
      document.getElementById("totalUsers").textContent = users.length;
      document.getElementById("activeUsers").textContent = users.filter(
        (u) => u.status === "active"
      ).length;

      // Fetch products
      const productsResponse = await fetch("/api/products");
      const products = await productsResponse.json();
      document.getElementById("totalProducts").textContent = products.length;
      document.getElementById("lowStockProducts").textContent = products.filter(
        (p) => p.stock < 10
      ).length;

      // Fetch orders
      const ordersResponse = await fetch("/api/orders");
      const orders = await ordersResponse.json();
      document.getElementById("totalOrders").textContent = orders.length;
      document.getElementById("pendingOrders").textContent = orders.filter(
        (o) => o.status === "pending"
      ).length;

      // Fetch bookings
      const bookingsResponse = await fetch("/api/bookings");
      const bookings = await bookingsResponse.json();
      document.getElementById("totalBookings").textContent = bookings.length;
      document.getElementById("todayBookings").textContent = bookings.filter(
        (b) => new Date(b.date).toDateString() === new Date().toDateString()
      ).length;

      // Fetch services
      const servicesResponse = await fetch("/api/services");
      const services = await servicesResponse.json();

      // Populate services table
      populateServicesTable(services);

      // Populate tables
      populateUsersTable(users);
      populateProductsTable(products);
      populateOrdersTable(orders);
      populateBookingsTable(bookings);

      // Populate recent items
      populateRecentOrders(orders.slice(0, 5));
      populateRecentBookings(bookings.slice(0, 5));
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
    }
  }

  // Table population functions
  function populateUsersTable(users) {
    const tbody = document.getElementById("usersTableBody");
    tbody.innerHTML = users
      .map(
        (user) => `
        <tr>
            <td>${user.fullName}</td>
            <td>${user.email}</td>
            <td>${user.phone || "-"}</td>
            <td>
                <span class="status-badge ${
                  user.role === "admin" ? "completed" : "cancelled"
                }">
                    ${user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-custom me-2" onclick="editUser('${
                  user._id
                }')">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-outline-custom text-danger" onclick="deleteUser('${
                  user._id
                }')">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        </tr>
    `
      )
      .join("");
  }

  function populateProductsTable(products) {
    const tbody = document.getElementById("productsTableBody");
    tbody.innerHTML = products
      .map(
        (product) => `
        <tr>
            <td>
                ${
                  product.image
                    ? `<img src="${product.image}" alt="${product.name}" class="product-thumbnail" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;">`
                    : '<div class="no-image" style="width: 50px; height: 50px; background: #f0f0f0; border-radius: 5px; display: flex; align-items: center; justify-content: center;"><i class="fas fa-image text-muted"></i></div>'
                }
            </td>
            <td>${product.name}</td>
            <td>${
              product.description
                ? product.description.substring(0, 50) +
                  (product.description.length > 50 ? "..." : "")
                : "-"
            }</td>
            <td>$${product.price.toFixed(2)}</td>
            <td>
                <span class="status-badge ${
                  product.stock < 10 ? "cancelled" : "completed"
                }">
                    ${product.stock}
                </span>
            </td>
            <td>
                <span class="status-badge completed">
                    ${product.category}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-custom me-2" onclick="editProduct('${
                  product._id
                }')">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-outline-custom text-danger" onclick="deleteProduct('${
                  product._id
                }')">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        </tr>
    `
      )
      .join("");
  }

  function populateOrdersTable(orders) {
    const tbody = document.getElementById("ordersTableBody");
    tbody.innerHTML = orders
      .map((order) => {
        const itemsHtml = Array.isArray(order.products)
          ? order.products
              .map(
                (item) =>
                  `${item.product && item.product.name ? item.product.name : "-"} <span class='badge bg-secondary ms-1'>x${item.quantity}</span>`
              )
              .join("<br>")
          : "-";
        return `
        <tr>
            <td>${order._id}</td>
            <td>${order.customer && order.customer.fullName ? order.customer.fullName : "-"}</td>
            <td>${itemsHtml}</td>
            <td>$${order.total ? order.total.toFixed(2) : "0.00"} EGP</td>
            <td>
                <span class="status-badge ${order.status ? order.status.toLowerCase() : ''}">
                    ${order.status || "-"}
                </span>
            </td>
        </tr>
    `;
      })
      .join("");
  }

  function populateBookingsTable(bookings) {
    const tbody = document.getElementById("bookingsTableBody");
    tbody.innerHTML = bookings
      .map(
        (booking) => `
        <tr>
            <td>${booking._id}</td>
            <td>${booking.customer && booking.customer.fullName ? booking.customer.fullName : (booking.user && booking.user.fullName ? booking.user.fullName : '-')}</td>
            <td>${booking.service && booking.service.name ? booking.service.name : '-'}</td>
            <td>${booking.date ? new Date(booking.date).toLocaleString() : '-'}</td>
            <td>
                <span class="status-badge ${booking.status ? booking.status.toLowerCase() : ''}">
                    ${booking.status || '-'}
                </span>
            </td>
        </tr>
    `
      )
      .join("");
  }

  function populateServicesTable(services) {
    const tbody = document.getElementById("servicesTableBody");
    tbody.innerHTML = services
      .map(
        (service) => `
        <tr>
            <td>
                ${
                  service.image
                    ? `<img src="${service.image}" alt="${service.name}" class="service-thumbnail" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;">`
                    : '<div class="no-image" style="width: 50px; height: 50px; background: #f0f0f0; border-radius: 5px; display: flex; align-items: center; justify-content: center;"><i class="fas fa-image text-muted"></i></div>'
                }
            </td>
            <td>${service.name}</td>
            <td>${
              service.description
                ? service.description.substring(0, 50) +
                  (service.description.length > 50 ? "..." : "")
                : "-"
            }</td>
            <td>$${service.price.toFixed(2)}</td>
            <td>${service.duration} min</td>
            <td>
                <span class="status-badge completed">
                    ${service.category}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-custom me-2" onclick="editService('${
                  service._id
                }')">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-outline-custom text-danger" onclick="deleteService('${
                  service._id
                }')">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        </tr>
    `
      )
      .join("");
  }

  function populateRecentOrders(orders) {
    const tbody = document.getElementById("recentOrdersTable");
    tbody.innerHTML = orders
      .map(
        (order) => `
        <tr>
            <td>${order._id}</td>
            <td>${order.user.fullName}</td>
            <td>$${order.total.toFixed(2)} EGP</td>
            <td>
                <span class="status-badge ${order.status.toLowerCase()}">
                    ${order.status}
                </span>
            </td>
        </tr>
    `
      )
      .join("");
  }

  function populateRecentBookings(bookings) {
    const tbody = document.getElementById("recentBookingsTable");
    tbody.innerHTML = bookings
      .map(
        (booking) => `
        <tr>
            <td>${booking._id}</td>
            <td>${booking.service.name}</td>
            <td>${new Date(booking.date).toLocaleDateString()}</td>
            <td>
                <span class="status-badge ${booking.status.toLowerCase()}">
                    ${booking.status}
                </span>
            </td>
        </tr>
    `
      )
      .join("");
  }

  // Validation functions
  function validateUserForm(formData) {
    const errors = [];
    const { fullName, email, password, phone, role } = Object.fromEntries(formData.entries());

    if (!fullName || fullName.trim().length < 2) {
      errors.push("Full name must be at least 2 characters long");
    }

    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      errors.push("Please enter a valid email address");
    }

    if (!password || password.length < 6) {
      errors.push("Password must be at least 6 characters long");
    }

    if (phone && !/^\+?[\d\s-]{10,}$/.test(phone)) {
      errors.push("Please enter a valid phone number");
    }

    if (!role || !['customer', 'admin'].includes(role)) {
      errors.push("Please select a valid role");
    }

    return errors;
  }

  function validateProductForm(formData) {
    const errors = [];
    const { name, price, stock, category } = Object.fromEntries(formData.entries());

    if (!name || name.trim().length < 2) {
      errors.push("Product name must be at least 2 characters long");
    }

    if (!price || isNaN(price) || parseFloat(price) <= 0) {
      errors.push("Please enter a valid price greater than 0");
    }

    if (!stock || isNaN(stock) || parseInt(stock) < 0) {
      errors.push("Please enter a valid stock quantity");
    }

    if (!category || !['Hair', 'Skincare', 'Makeup', 'Bath and Body'].includes(category)) {
      errors.push("Please select a valid category");
    }

    const image = formData.get('image');
    if (!image || image.size === 0) {
      errors.push("Please upload a product image");
    } else {
      const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
      if (!allowedTypes.includes(image.type)) {
        errors.push("Please upload a valid image file (JPEG, PNG, or GIF)");
      }
      if (image.size > 5 * 1024 * 1024) { // 5MB limit
        errors.push("Image size must be less than 5MB");
      }
    }

    return errors;
  }

  function validateServiceForm(formData) {
    const errors = [];
    const { name, price, duration, category } = Object.fromEntries(formData.entries());

    if (!name || name.trim().length < 2) {
      errors.push("Service name must be at least 2 characters long");
    }

    if (!price || isNaN(price) || parseFloat(price) <= 0) {
      errors.push("Please enter a valid price greater than 0");
    }

    if (!duration || isNaN(duration) || parseInt(duration) < 10) {
      errors.push("Duration must be at least 10 minutes");
    }

    if (!category || !['Hair', 'Nails', 'Body Care', 'Makeup', 'Bridal'].includes(category)) {
      errors.push("Please select a valid category");
    }

    const image = formData.get('image');
    if (!image || image.size === 0) {
      errors.push("Please upload a service image");
    } else {
      const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
      if (!allowedTypes.includes(image.type)) {
        errors.push("Please upload a valid image file (JPEG, PNG, or GIF)");
      }
      if (image.size > 5 * 1024 * 1024) { // 5MB limit
        errors.push("Image size must be less than 5MB");
      }
    }

    return errors;
  }

  // Update form submission handlers with inline error display
  document.getElementById("addUserForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const errorDiv = document.getElementById("addUserError");
    // Validate form data
    const errors = validateUserForm(formData);
    if (errors.length > 0) {
      errorDiv.innerHTML = errors.map(err => `<div>${err}</div>`).join('');
      errorDiv.classList.remove("d-none");
      return;
    }
    errorDiv.classList.add("d-none");

    const userData = Object.fromEntries(formData.entries());

    // Remove empty fields
    Object.keys(userData).forEach((key) => {
      if (!userData[key]) {
        delete userData[key];
      }
    });

    try {
      const response = await fetch("/api/users", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        const result = await response.json();
        bootstrap.Modal.getInstance(document.getElementById("addUserModal")).hide();
        fetchDashboardData();
        e.target.reset();
        alert("User added successfully!");
      } else {
        const error = await response.json();
        console.error("Failed to add user:", error);
        if (error.errors) {
          alert(error.errors.map((err) => err.msg).join("\n"));
        } else {
          alert("Failed to add user. Please try again.");
        }
      }
    } catch (error) {
      console.error("Error adding user:", error);
      alert("Error adding user. Please try again.");
    }
  });

  document.getElementById("addUserForm").addEventListener("input", () => {
    document.getElementById("addUserError").classList.add("d-none");
  });

  document.getElementById("addProductForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const errorDiv = document.getElementById("addProductError");
    // Validate form data
    const errors = validateProductForm(formData);
    if (errors.length > 0) {
      errorDiv.innerHTML = errors.map(err => `<div>${err}</div>`).join('');
      errorDiv.classList.remove("d-none");
      return;
    }
    errorDiv.classList.add("d-none");

    try {
      const response = await fetch("/api/products", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        bootstrap.Modal.getInstance(document.getElementById("addProductModal")).hide();
        fetchDashboardData();
        e.target.reset();
        alert("Product added successfully!");
      } else {
        const error = await response.json();
        console.error("Failed to add product:", error);
        alert("Failed to add product. Please try again.");
      }
    } catch (error) {
      console.error("Error adding product:", error);
      alert("Error adding product. Please try again.");
    }
  });

  document.getElementById("addProductForm").addEventListener("input", () => {
    document.getElementById("addProductError").classList.add("d-none");
  });

  document.getElementById("addServiceForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const errorDiv = document.getElementById("addServiceError");
    // Validate form data
    const errors = validateServiceForm(formData);
    if (errors.length > 0) {
      errorDiv.innerHTML = errors.map(err => `<div>${err}</div>`).join('');
      errorDiv.classList.remove("d-none");
      return;
    }
    errorDiv.classList.add("d-none");

    try {
      const response = await fetch("/api/services", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        bootstrap.Modal.getInstance(document.getElementById("addServiceModal")).hide();
        fetchDashboardData();
        e.target.reset();
        alert("Service added successfully!");
      } else {
        const error = await response.json();
        console.error("Failed to add service:", error);
        alert("Failed to add service. Please try again.");
      }
    } catch (error) {
      console.error("Error adding service:", error);
      alert("Error adding service. Please try again.");
    }
  });

  document.getElementById("addServiceForm").addEventListener("input", () => {
    document.getElementById("addServiceError").classList.add("d-none");
  });

  // Add deleteProduct function
  async function deleteProduct(productId) {
    if (!confirm("Are you sure you want to delete this product?")) {
      return;
    }

    try {
      const response = await fetch(`/api/products/${productId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        // Refresh the products table
        fetchDashboardData();
        // Show success message
        alert("Product deleted successfully");
      } else {
        const error = await response.json();
        console.error("Failed to delete product:", error);
        alert("Failed to delete product. Please try again.");
      }
    } catch (error) {
      console.error("Error deleting product:", error);
      alert("Error deleting product. Please try again.");
    }
  }

  // Add editProduct function (placeholder for now)
  function editProduct(productId) {
    // TODO: Implement edit functionality
    alert("Edit functionality coming soon!");
  }

  // Add deleteService function
  async function deleteService(serviceId) {
    if (!confirm("Are you sure you want to delete this service?")) {
      return;
    }

    try {
      const response = await fetch(`/api/services/${serviceId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        // Refresh the services table
        fetchDashboardData();
        // Show success message
        alert("Service deleted successfully");
      } else {
        const error = await response.json();
        console.error("Failed to delete service:", error);
        alert("Failed to delete service. Please try again.");
      }
    } catch (error) {
      console.error("Error deleting service:", error);
      alert("Error deleting service. Please try again.");
    }
  }

  // Add editService function (placeholder for now)
  function editService(serviceId) {
    // TODO: Implement edit functionality
    alert("Edit functionality coming soon!");
  }

  // Add deleteUser function
  async function deleteUser(userId) {
    if (!confirm("Are you sure you want to delete this user?")) return;

    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        fetchDashboardData();
      } else {
        const error = await response.json();
        console.error("Failed to delete user:", error);
        alert("Failed to delete user. Please try again.");
      }
    } catch (error) {
      console.error("Error deleting user:", error);
      alert("Error deleting user. Please try again.");
    }
  }

  // Add editUser function (placeholder for now)
  function editUser(userId) {
    // TODO: Implement edit functionality
    alert("Edit functionality coming soon!");
  }

  // Initialize dashboard
  document.addEventListener("DOMContentLoaded", () => {
    fetchDashboardData();
  });
</script>

<%- include('partials/footer') %>
